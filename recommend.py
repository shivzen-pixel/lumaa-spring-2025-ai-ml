# -*- coding: utf-8 -*-
"""recommend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u9MgJQ4CWCwzNR5FWHY313NTNwrt762y
"""

import pandas as pd
import numpy as np

#Load the dataset
data = pd.read_csv('titles.csv')
data.head()

#Filter dataset to 500 rows and only include descriptions

#filtered_data = data[data['type'] == 'SHOW']
data.dropna(subset=['description'], inplace=True)
#filtered_data = filtered_data[:500]
#filtered_data.to_csv('filtered_data.csv', index=False)
#filtered_data.head()

#Apply TF-IDF Vectorizer to its description column
from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer(analyzer='word', ngram_range=(1, 2), min_df=2, stop_words='english')
tfidf_matrix = tf.fit_transform(data['description'])
#tfidf_matrix.shape

#Function to get User input
def get_user_input():
    user_input = input("Enter a description: ")
    tf_idf_input = tf.transform([user_input])
    return tf_idf_input

from sklearn.metrics.pairwise import cosine_similarity
def get_shows(tfidf_matrix, tf_idf_input):
  cosine_similarities = cosine_similarity(tf_idf_input, tfidf_matrix)
  top_n = 3

  # Get top indices and corresponding similarity scores
  top_indices = cosine_similarities.argsort()[0][-top_n:]
  top_scores = cosine_similarities[0][top_indices]  # Extract similarity scores

  results = [(data['title'].iloc[i], data['type'].iloc[i], score) for i, score in zip(top_indices, top_scores)]

  return results  # Return results with similarity scores

if __name__ == '__main__':
  flag=True
  while flag==True:
    tf_idf_input = get_user_input()
    result = get_shows(tfidf_matrix, tf_idf_input)
    for x,y,score in result[::-1]:
      print(f"->({y})  {x} : {round(score,2)}")

    print("\n\n Do you want to find more shows or Movies?")
    i = input()
    if i=="yes":
      continue
    else:
      flag=False



